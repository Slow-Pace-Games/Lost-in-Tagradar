using UnityEngine;

public class RessourceExploitable : Ressource
{
    public enum Purity
    {
        Impur = 1,
        Normal = 2,
        Pure = 4
    }

    private float timerHarvest;
    private float initTimerHarvest;
    [SerializeField] float radius = 1f;
    public Purity purity = Purity.Normal;


    // Start is called before the first frame update
    protected override void Start()
    {
        base.Start();
        InitRessource();
    }

    public override bool Harvest()
    {
        if (PlayerInputManager.Instance.InteractIsPressed())
        {
            timerHarvest -= Time.deltaTime;
            float fillAmount = 1 - timerHarvest;
            if(fillAmount < 0) 
            {
                fillAmount = 0;
            }
            else if(fillAmount > 1) 
            { 
                fillAmount = 1;
            }
            PlayerUi.Instance.UpdateFillAmountMinage(fillAmount);
            if (timerHarvest < 0f)
            {
                if (base.Harvest())
                {
                    Loid.Instance.UpdateTuto(PlayerAction.Digg);
                    InitTimerHarvest();
                    return true;
                }
                return false;
            }
            return false;
        }
        else
        {
            PlayerUi.Instance.UpdateFillAmountMinage(0);
            InitTimerHarvest();
            return false;
        }
    }

    private void InitTimerHarvest()
    {
        timerHarvest = initTimerHarvest;
    }

    private void OnValidate()
    {
        Vector3 scale = new Vector3(radius, gameObject.transform.localScale.y, radius);
        gameObject.transform.localScale = scale;
    }

    private void InitRessource()
    {
        // Init timer for harvest
        initTimerHarvest = 1f;
        InitTimerHarvest();

        // Init amount of ressource harvested
        if (sORessource.randomHarvestableCount)
        {
            harvestAmount = Random.Range(sORessource.minHarvestedAmount, sORessource.maxHarvestedAmount + 1);
        }
        else
        {
            harvestAmount = sORessource.minHarvestedAmount * (int)purity;
        }
    }
}
